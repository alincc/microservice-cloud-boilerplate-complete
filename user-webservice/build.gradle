/*
* Build file for user-webservice
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'eclipse'

buildscript {
	project.ext {
         springBootVersion = '1.5.3.RELEASE'
         jarName = 'basic-user-webservice'
         versionName = '0.0.1'
         gradleDockerVersion = '1.2'
         lombokVersion: '1.16.16'

    }
    repositories {
        jcenter()
        mavenCentral()
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '3.5'
}



// Used by the Docker gradle plugin, group refers to the account under which the docker image is created
group = 'anilallewar'
mainClassName = 'com.anilallewar.microservices.user.UserApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
  }
}

dependencies {
    // Basic Spring boot with config client
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile("org.springframework.boot:spring-boot-starter-web")    {
        exclude module : 'spring-boot-starter-logging'
    }

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
       exclude module : 'spring-boot-starter-logging'

    }
    compile('org.springframework.boot:spring-boot-starter-log4j2')

    compile("com.h2database:h2")

    // zipkin
    compile 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

    // sleuth
    compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
    // kafka appender
   // compile 'org.apache.kafka:kafka-log4j-appender:0.9.0.0'
    // log back
    compile 'net.logstash.logback:logstash-logback-encoder:4.9'
    compile'ch.qos.logback:logback-classic:1.2.3'
    compile'ch.qos.logback:logback-core:1.2.3'
    // model mapper DTO to entity and else
    compile 'com.github.rozidan:modelmapper-spring-boot-starter:1.0.0'

    // flyway for database version conrol
    compile "org.flywaydb:flyway-core:5.0.7"


    // lombok
    compileOnly "org.projectlombok:lombok:1.16.16"

    
    // Eureka client
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
	
	// Zipkin tracing
	compile('org.springframework.cloud:spring-cloud-starter-zipkin')

}

jar {
    baseName = "${project.jarName}"
    version =  "${project.versionName}"
}

/*
* This task builds the docker image by copying the output of the "jar" gradle command
* and moving it to the "build/docker" directory which is used as the staging directory 
* by the docker gradle plugin. We then build the docker image by invoking the appropriate
* Dockerfile.  
*/
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  tagVersion = jar.version
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    // Copy the built fat jar to the Docker plugin staging directory
    copy {
      from jar
      into stageDir
    }
    // Copy the run.sh file to the Docker plugin staging directory
    copy {
      from "${project.buildDir}/resources/main/run.sh"
      into stageDir
    }
  }
}

run {
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4200,suspend=n','-Dspring.profiles.active=default']
}

